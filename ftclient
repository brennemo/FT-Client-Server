#!/usr/bin/python

# Morgan Brenner
# brennemo@oregonstate.edu 
# CS 372 Program 2

import signal 
import socket
import os, sys

def checkArgs(argv):
	#check # of args 
	if len(argv) < 5:
		return 1

	#check for valid command 
	elif argv[3] != '-l' and argv[3] != '-g' :
		return 1

	#ports are numbers, not reserved ports, or out of range 
	elif argv[2].isdigit() == False or int(argv[2]) < 1024 or int(argv[2]) > 65535:					
		return 1

	elif argv[len(argv) - 1].isdigit() == False or int(argv[len(argv) - 1]) < 1024 or int(argv[len(argv) - 1]) > 65535:		
		print 'DATA_PORT'
		print usage
		exit(1)

	#check for file name 
	elif argv[3] == '-g' and len(argv) < 6: 
		return 1

	else: 
		return 0

def initiateContact(argv):
	"""
    Returns: socket file descriptor for control connection 
    """   
	HOST = argv[1]
	PORT = int(argv[2])   
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((HOST, PORT))
	return s

def startUp(port):
    """
    Returns: socket file descriptor for data connection 
    """   
    q = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    q.bind(('', port))
    q.listen(1)                #allow 1 connection at a time 
    return q 

def makeRequest(s, argv): 
	"""
    Parses and formats command, sends to server via ctrl connection  
    """   
	if argv[3] == '-l':
		cmd = ' '.join(argv[3:len(argv)])[1:]	#join args with spaces, trim '-' from option
		#print cmd
		s.send(cmd)

		q = startUp(int(argv[4]))		#wait for file list 

		conn, addr = q.accept() 
		response = conn.recv(1000)

		print 'Receiving directory structure from ' + argv[1] + ':' + argv[2]
		print response	 

		conn.close() 

	elif argv[3] == '-g':
		cmd = ' '.join(argv[3:len(argv)])[1:]	#join args with spaces, trim '-' from option
		print cmd 
		s.send(cmd)

		#HANDLE FILE NOT FOUND 
		ok = s.recv(1000)
		if 'ok' not in ok:
			print ok
			return 

		q = startUp(int(argv[5]))		#wait for files

		s.send('ok')

		conn, addr = q.accept() 
		receiveFile(conn, argv)

		conn.close() 

	return 


def receiveFile(conn, argv): 
	"""
    Repeatedly receives 1000-byte chunks of string from server on data connection,
    and stores them in the appropriate file 
    """   
	print 'Receiving ' + '\"' + argv[4] + '\" from ' + argv[1] + ':' + argv[2]

	#handle duplicate file names
	if isDuplicateFile(argv[4]):
		print 'duplicate file name'
		return 

	f = open(argv[4], 'w+')

	response = ''
	count = 0
	while '@@' not in response:			#'@@' from server signals end of transfer 
		f.write(response)
		#print response
		count += 1
		response = ''
		response = conn.recv(1000)
		if '@@' in response:
			print 'end!'
		#print response	#test print  
	print 'count = ' + str(count)
	print 'transfer complete'
	f.close()
	return 

def isDuplicateFile(fileName):
	dir = os.listdir('.')
	return fileName in dir

def sigint_handler(signal, frame):
    """
    sigint handler for closing server program cleanly 
    """
    print "\nexiting ftclient"
    sys.exit(0)

signal.signal(signal.SIGINT, sigint_handler)

if __name__ == "__main__":	
	#validate command line parameters 
	if checkArgs(sys.argv):
		print 'USAGE: ./ftclient <SERVER_HOST> <SERVER_PORT> <COMMAND> [FILENAME] <DATA_PORT>'
		exit(1)


	#establish TCP control connection on <SERVER_PORT>, i.e., connection P
	s = initiateContact(sys.argv)
	makeRequest(s, sys.argv)
	
	s.close()
	
	
	#print 'Received', repr(response)
	

